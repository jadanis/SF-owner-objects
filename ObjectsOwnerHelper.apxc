/*
* 
*/
public class ObjectsOwnerHelper {

  private static object_api_names = new List<String>();
  
  private static void initialize(){
  
    Schema.DescribeSObjectResult userDSR = User.SObjectType.getDescribe();
    Set<Schema.DescribeSObjectResult> dsrsS = new Set<Schema.DescribeSObjectResult>();
    
    for(Schema.ChildRelationship child : userDSR.getChildRelationships()){
      if(child.getChildSObject().getDescribe().isSearchable()){
        dsrsS.add(child.getChildSObject().getDescribe());
      }
    }
    
    for(Schema.DescribeSObjectResult dsr : dsrsS){
      api_names.add(dsr.getName());
    }
  } //end of initialize()
  
  private static SObject[] flatten(List<List<SObject>> sobs){
    List<SObject> newsob = new List<SObject>();
    for(List<SObject> sob : sobs){
      newsob.addAll(sob);
     }
     return newsob;
  } // end of flatten()

  public static SObject[] getObjects(id userId){
      String query1 = 'SELECT Id FROM ';
      String query2 = ' WHERE Id = :userId';
      String[] queries = new List<String>();
      
      for(String name : object_api_names){
        queries.add(query1 + name + query2);
      }
      
      List<List<SObject>> rets = new List<List<SObject>>();
      for(String query : queries){
        rets.add(Database.query(query));
      }
      
      return flatten(rets);
  }// end of getObjects()

}
